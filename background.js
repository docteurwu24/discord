// background.js - Service Worker Am√©lior√©

// Initialisation au premier lancement avec des valeurs par d√©faut plus robustes
chrome.runtime.onInstalled.addListener(() => {
  console.log('ü§ñ Discord AI Assistant install√© - Version am√©lior√©e');
  
  // V√©rifier si des donn√©es existent d√©j√† avant d'initialiser
  chrome.storage.local.get(['userProfiles', 'activeProfileId', 'apiKey'], (result) => {
    const updates = {};
    
    if (!result.userProfiles) {
      // Cr√©er un profil par d√©faut si aucun n'existe
      const defaultProfileId = 'default_' + Date.now();
      updates.userProfiles = {
        [defaultProfileId]: {
          id: defaultProfileId,
          name: 'Profil par d√©faut',
          tone: 'casual',
          responseLength: 'medium',
          expressions: ['ok', 'cool', 'sympa'],
          expertise: ['g√©n√©ral'],
          createdAt: new Date().toISOString()
        }
      };
      updates.activeProfileId = defaultProfileId;
    }
    
    if (!result.apiKey) {
      updates.apiKey = '';
    }
    
    // Ajouter des param√®tres d'extension
    updates.extensionSettings = {
      autoSave: true,
      maxMessages: 20,
      debugMode: false,
      lastUsed: new Date().toISOString()
    };
    
    if (Object.keys(updates).length > 0) {
      chrome.storage.local.set(updates, () => {
        console.log('‚úÖ Param√®tres initialis√©s:', updates);
      });
    }
  });
});

// √âcoute les messages du content script avec gestion d'erreurs am√©lior√©e
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('üì® Message re√ßu:', request);
  
  if (request.action === 'generateResponse') {
    generateAIResponse(request.data)
      .then(response => {
        console.log('‚úÖ R√©ponse g√©n√©r√©e avec succ√®s');
        sendResponse({ success: true, data: response });
      })
      .catch(error => {
        console.error('‚ùå Erreur captur√©e dans le gestionnaire de messages:', error);
        sendResponse({ 
          success: false, 
          error: error.message,
          errorType: error.name || 'GenerationError'
        });
      });
    return true; // Obligatoire pour une r√©ponse asynchrone
  }
  
  // Nouvelle action pour sauvegarder les param√®tres
  if (request.action === 'saveSettings') {
    chrome.storage.local.set(request.data, () => {
      console.log('‚öôÔ∏è Param√®tres sauvegard√©s:', request.data);
      sendResponse({ success: true });
    });
    return true;
  }
  
  // Nouvelle action pour r√©cup√©rer les param√®tres
  if (request.action === 'getSettings') {
    chrome.storage.local.get(request.keys || null, (result) => {
      console.log('üìã Param√®tres r√©cup√©r√©s:', result);
      sendResponse({ success: true, data: result });
    });
    return true;
  }
});

async function generateAIResponse(conversationData) {
  try {
    console.log('üîÑ D√©but de g√©n√©ration de r√©ponse IA...');
    
    // R√©cup√©ration des donn√©es avec validation
    const storage = await chrome.storage.local.get([
      'apiKey', 
      'userProfiles', 
      'activeProfileId', 
      'extensionSettings'
    ]);
    
    const { apiKey, userProfiles, activeProfileId, extensionSettings } = storage;
    
    // Validations avec messages d'erreur plus pr√©cis
    if (!apiKey || apiKey.trim() === '') {
      throw new Error("‚ùå Cl√© API Google Gemini manquante. Configurez-la dans les options de l'extension (clic sur l'ic√¥ne ü§ñ).");
    }

    if (!userProfiles || Object.keys(userProfiles).length === 0) {
      throw new Error("‚ùå Aucun profil trouv√©. Cr√©ez un profil dans les options de l'extension.");
    }
    
    if (!activeProfileId || !userProfiles[activeProfileId]) {
      throw new Error("‚ùå Profil actif introuvable. S√©lectionnez un profil dans les options.");
    }
    
    const activeProfile = userProfiles[activeProfileId];
    console.log(`üé≠ Utilisation du profil : "${activeProfile.name}"`);

    const { messages } = conversationData;
    
    if (!messages || messages.length === 0) {
      throw new Error("‚ùå Aucun message √† analyser. Participez √† la conversation d'abord.");
    }

    // Construction du prompt am√©lior√©
    const improvedPrompt = buildImprovedPrompt(messages, activeProfile, extensionSettings);
    
    console.log('üìù Prompt construit:', improvedPrompt.substring(0, 200) + '...');

    // Appel API avec param√®tres optimis√©s
    const response = await callGeminiAPI(apiKey, improvedPrompt);
    
    // Traitement et nettoyage de la r√©ponse
    const cleanedSuggestions = processGeminiResponse(response);
    
    // Mise √† jour des statistiques d'utilisation
    await updateUsageStats(activeProfileId);
    
    console.log('‚ú® Suggestions finales:', cleanedSuggestions);
    return cleanedSuggestions;

  } catch (error) {
    console.error('üí• Erreur lors de la g√©n√©ration:', error);
    
    // Enregistrer l'erreur pour d√©buggage
    chrome.storage.local.get(['errorLog'], (result) => {
      const errorLog = result.errorLog || [];
      errorLog.push({
        timestamp: new Date().toISOString(),
        error: error.message,
        stack: error.stack
      });
      
      // Garder seulement les 10 derni√®res erreurs
      if (errorLog.length > 10) {
        errorLog.splice(0, errorLog.length - 10);
      }
      
      chrome.storage.local.set({ errorLog });
    });
    
    throw error;
  }
}

function buildImprovedPrompt(messages, profile, settings) {
  const { tone, expressions, responseLength, expertise } = profile;
  const maxMessages = settings?.maxMessages || 15;
  
  // Prendre les messages les plus r√©cents
  const recentMessages = messages.slice(-maxMessages);
  const conversationHistory = recentMessages
    .map(msg => `${msg.author}: ${msg.content}`)
    .join('\n');

  // Construction du contexte d'expertise
  let expertiseContext = '';
  if (expertise && expertise.length > 0) {
    expertiseContext = `Tu as des connaissances dans : ${expertise.join(', ')}. Utilise cette expertise quand c'est pertinent pour la conversation.`;
  }

  // Construction du contexte d'expressions
  let expressionContext = '';
  if (expressions && expressions.length > 0) {
    expressionContext = `Int√®gre naturellement ces expressions dans tes r√©ponses : ${expressions.join(', ')}. Ne les force pas, utilise-les seulement si elles s'int√®grent bien.`;
  }

  // Param√®tres de longueur
  const lengthInstructions = {
    'short': 'R√©ponses tr√®s courtes (5-15 mots maximum)',
    'medium': 'R√©ponses mod√©r√©es (15-40 mots)',
    'long': 'R√©ponses d√©taill√©es (40-80 mots)'
  };

  // Param√®tres de ton
  const toneInstructions = {
    'casual': 'Ton d√©contract√© et naturel, comme entre amis',
    'formal': 'Ton poli et respectueux, langage soutenu',
    'friendly': 'Ton chaleureux et bienveillant',
    'professional': 'Ton professionnel et comp√©tent',
    'sarcastic': 'Ton ironique et piquant (avec subtilit√©)',
    'humorous': 'Ton amusant et l√©ger',
    'serious': 'Ton s√©rieux et r√©fl√©chi'
  };

  return `Tu es un assistant IA sp√©cialis√© dans les conversations Discord. Ta mission est de g√©n√©rer exactement 4 suggestions de r√©ponses pertinentes pour continuer une conversation naturellement.

CONTEXTE DE LA CONVERSATION :
${conversationHistory}

PERSONNALIT√â √Ä ADOPTER :
- Ton : ${toneInstructions[tone] || toneInstructions.casual}
- Longueur : ${lengthInstructions[responseLength] || lengthInstructions.medium}
- ${expertiseContext}
- ${expressionContext}

R√àGLES STRICTES :
1. G√©n√®re EXACTEMENT 4 suggestions, ni plus ni moins
2. Chaque suggestion sur une nouvelle ligne
3. Pas de num√©ros, tirets ou puces
4. Pas d'explications ou commentaires
5. Concentre-toi sur les 3 derniers messages pour la pertinence
6. Sois authentique et humain, √©vite le langage robotique
7. Varie le style entre les 4 suggestions
8. Assure-toi que chaque r√©ponse peut logiquement suivre la conversation

FORMATS INTERDITS :
‚ùå 1. Premi√®re r√©ponse
‚ùå - Premi√®re r√©ponse  
‚ùå ‚Ä¢ Premi√®re r√©ponse

FORMAT CORRECT :
‚úÖ Premi√®re r√©ponse
‚úÖ Deuxi√®me r√©ponse
‚úÖ Troisi√®me r√©ponse
‚úÖ Quatri√®me r√©ponse

G√©n√®re maintenant 4 suggestions de r√©ponses :`;
}

async function callGeminiAPI(apiKey, prompt) {
  const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;

  const requestBody = {
    contents: [{ 
      parts: [{ text: prompt }] 
    }],
    generationConfig: {
      temperature: 0.7,
      maxOutputTokens: 300,
      topP: 0.8,
      topK: 40
    },
    safetySettings: [
      {
        category: "HARM_CATEGORY_HARASSMENT",
        threshold: "BLOCK_MEDIUM_AND_ABOVE"
      },
      {
        category: "HARM_CATEGORY_HATE_SPEECH", 
        threshold: "BLOCK_MEDIUM_AND_ABOVE"
      }
    ]
  };

  console.log('üöÄ Envoi de la requ√™te √† Gemini...');
  
  const response = await fetch(GEMINI_API_URL, {
    method: 'POST',
    headers: { 
      'Content-Type': 'application/json',
      'User-Agent': 'Discord-AI-Assistant/1.0'
    },
    body: JSON.stringify(requestBody)
  });

  if (!response.ok) {
    const errorData = await response.json().catch(() => ({}));
    console.error('üî• Erreur API Gemini:', errorData);
    
    if (response.status === 400) {
      throw new Error('Cl√© API invalide ou requ√™te malform√©e. V√©rifiez votre cl√© API.');
    } else if (response.status === 403) {
      throw new Error('Acc√®s refus√©. V√©rifiez que votre cl√© API a les bonnes permissions.');
    } else if (response.status === 429) {
      throw new Error('Limite de taux d√©pass√©e. Attendez quelques minutes avant de r√©essayer.');
    } else {
      throw new Error(`Erreur API (${response.status}): ${errorData.error?.message || 'Erreur inconnue'}`);
    }
  }

  const data = await response.json();
  console.log('üì• R√©ponse brute Gemini:', JSON.stringify(data, null, 2));
  return data;
}

function processGeminiResponse(data) {
  // Validation de la structure de r√©ponse
  if (!data.candidates || data.candidates.length === 0) {
    throw new Error('Aucune suggestion g√©n√©r√©e par l\'IA. R√©essayez avec une conversation diff√©rente.');
  }

  const candidate = data.candidates[0];
  if (!candidate.content || !candidate.content.parts || candidate.content.parts.length === 0) {
    throw new Error('R√©ponse IA malform√©e. R√©essayez.');
  }

  const textResponse = candidate.content.parts[0].text;
  if (!textResponse || textResponse.trim() === '') {
    throw new Error('R√©ponse IA vide. R√©essayez.');
  }

  // Nettoyage et formatage am√©lior√©
  const suggestions = textResponse
    .split('\n')
    .map(line => line.trim())
    .filter(line => line.length > 0)
    .map(line => {
      // Supprimer les pr√©fixes courants
      return line.replace(/^[-*‚Ä¢]\s*|^\d+[\.)]\s*|^[‚ñ∫‚ñ∏]\s*/, '');
    })
    .filter(line => {
      // Filtrer les lignes trop courtes ou qui semblent √™tre des instructions
      return line.length >= 3 && 
             !line.toLowerCase().includes('suggestion') &&
             !line.toLowerCase().includes('r√©ponse');
    })
    .slice(0, 4); // Garder max 4 suggestions

  if (suggestions.length === 0) {
    throw new Error('Impossible d\'extraire des suggestions valides. Reformulez votre conversation.');
  }

  // Si moins de 4 suggestions, on peut essayer de g√©n√©rer des variantes
  while (suggestions.length < 4 && suggestions.length > 0) {
    const lastSuggestion = suggestions[suggestions.length - 1];
    // Ajouter une variante simple si pas assez de suggestions
    if (suggestions.length < 2) {
      suggestions.push(addVariation(lastSuggestion));
    } else {
      break; // Arr√™ter si on ne peut pas g√©n√©rer plus naturellement
    }
  }

  return suggestions;
}

function addVariation(original) {
  const variations = [
    text => `Ah ${text.toLowerCase()}`,
    text => `${text} üëç`,
    text => `Exactement, ${text.toLowerCase()}`,
    text => `${text} !`
  ];
  
  const randomVariation = variations[Math.floor(Math.random() * variations.length)];
  return randomVariation(original);
}

async function updateUsageStats(profileId) {
  try {
    const result = await chrome.storage.local.get(['usageStats']);
    const stats = result.usageStats || {};
    
    const today = new Date().toDateString();
    if (!stats[today]) {
      stats[today] = { total: 0, profiles: {} };
    }
    
    stats[today].total += 1;
    stats[today].profiles[profileId] = (stats[today].profiles[profileId] || 0) + 1;
    
    // Garder seulement les 30 derniers jours
    const dates = Object.keys(stats).sort();
    if (dates.length > 30) {
      dates.slice(0, dates.length - 30).forEach(date => delete stats[date]);
    }
    
    await chrome.storage.local.set({ usageStats: stats });
  } catch (error) {
    console.warn('‚ö†Ô∏è Impossible de mettre √† jour les statistiques:', error);
  }
}