// background.js - Service Worker Am√©lior√© avec Personas

// Initialisation au premier lancement avec des personas par d√©faut
chrome.runtime.onInstalled.addListener(() => {
  console.log('ü§ñ Discord AI Assistant install√© - Version Personas');

  chrome.storage.local.get(['personas', 'activePersonaId', 'apiKey', 'extensionSettings'], (result) => {
    console.log('onInstalled: Checking for existing data...', result);
    const updates = {};

    if (!result.personas) {
      const defaultPersonas = {
        'casual_friend': { id: 'casual_friend', name: 'üòé Ami D√©contract√©', prompt: 'Tu es un ami sympa et d√©contract√©. Tu r√©ponds de mani√®re naturelle, avec un ton amical et d√©tendu. Tu utilises des expressions comme "salut", "cool", "sympa", "tranquille". Tu es toujours positif et encourageant.', createdAt: new Date().toISOString(), lastUsed: new Date().toISOString() },
        'professional': { id: 'professional', name: 'üíº Assistant Professionnel', prompt: 'Tu es un assistant professionnel et courtois. Tu r√©ponds de mani√®re formelle mais chaleureuse. Tu utilises un vocabulaire soutenu et pr√©cis. Tu restes toujours respectueux et constructif dans tes r√©ponses.', createdAt: new Date().toISOString(), lastUsed: new Date().toISOString() },
        'gamer': { id: 'gamer', name: 'üéÆ Gamer Passionn√©', prompt: 'Tu es un gamer passionn√© qui conna√Æt bien l\'univers du gaming. Tu r√©ponds avec enthousiasme et utilises le vocabulaire du gaming. Tu peux faire des r√©f√©rences aux jeux populaires et comprends la culture gamer.', createdAt: new Date().toISOString(), lastUsed: new Date().toISOString() },
        'funny': { id: 'funny', name: 'üòÇ Comique', prompt: 'Tu es quelqu\'un de dr√¥le et spirituel. Tu aimes faire des blagues et des jeux de mots. Tu r√©ponds avec humour tout en restant appropri√©. Tu utilises des emojis et des expressions amusantes pour rendre la conversation plus l√©g√®re.', createdAt: new Date().toISOString(), lastUsed: new Date().toISOString() }
      };
      updates.personas = defaultPersonas;
      updates.activePersonaId = 'casual_friend';
    }

    if (!result.apiKey) {
      updates.apiKey = '';
    }

    if (!result.extensionSettings) {
      updates.extensionSettings = {
        autoSave: true,
        maxMessages: 20,
        debugMode: false,
        responseLength: 'medium',
        lastUsed: new Date().toISOString(),
        totalGenerations: 0
      };
    }

    if (Object.keys(updates).length > 0) {
      console.log('onInstalled: Applying default settings:', updates);
      chrome.storage.local.set(updates, () => {
        if (chrome.runtime.lastError) {
            console.error('onInstalled: Error applying default settings:', chrome.runtime.lastError);
        } else {
            console.log('‚úÖ Personas et param√®tres par d√©faut initialis√©s:', Object.keys(updates));
        }
      });
    } else {
      console.log('onInstalled: Existing data found, no default settings applied.');
    }
  });
});

chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('üì® Message re√ßu:', request.action, 'Donn√©es:', request.data);

  if (request.action === 'generateResponse') {
    generateAIResponse(request.data)
      .then(response => {
        console.log('‚úÖ R√©ponse g√©n√©r√©e avec succ√®s pour generateResponse');
        sendResponse({ success: true, data: response });
      })
      .catch(error => {
        console.error('‚ùå Erreur captur√©e dans le gestionnaire de messages pour generateResponse:', error);
        sendResponse({ success: false, error: error });
      });
    return true;
  }

  if (request.action === 'savePersona') {
    savePersona(request.data)
      .then(result => sendResponse({ success: true, data: result }))
      .catch(error => sendResponse({ success: false, error: error.message }));
    return true;
  }

  if (request.action === 'deletePersona') {
    deletePersona(request.data.personaId)
      .then(result => sendResponse({ success: true, data: result }))
      .catch(error => sendResponse({ success: false, error: error.message }));
    return true;
  }

  if (request.action === 'setActivePersona') {
    setActivePersona(request.data.personaId)
      .then(result => sendResponse({ success: true, data: result }))
      .catch(error => sendResponse({ success: false, error: error.message }));
    return true;
  }

  if (request.action === 'saveSettings') {
    console.log('Attempting to save settings:', request.data);
    chrome.storage.local.set(request.data, () => {
      if (chrome.runtime.lastError) {
        console.error('‚ùå Erreur lors de la sauvegarde des param√®tres (saveSettings):', chrome.runtime.lastError.message, request.data);
        sendResponse({ success: false, error: 'Impossible de sauvegarder les param√®tres: ' + chrome.runtime.lastError.message });
      } else {
        console.log('‚öôÔ∏è Settings successfully saved:', request.data);
        sendResponse({ success: true });
      }
    });
    return true;
  }

  if (request.action === 'getSettings') {
    console.log('Attempting to get settings for keys:', request.keys);
    chrome.storage.local.get(request.keys || null, (result) => {
      if (chrome.runtime.lastError) {
        console.error('‚ùå Erreur lors de la r√©cup√©ration des param√®tres (getSettings):', chrome.runtime.lastError.message, request.keys);
        sendResponse({ success: false, error: 'Impossible de r√©cup√©rer les param√®tres: ' + chrome.runtime.lastError.message });
      } else {
        console.log('üìã Settings successfully retrieved:', result);
        sendResponse({ success: true, data: result });
      }
    });
    return true;
  }
});

async function generateAIResponse(conversationData) {
  let activePersonaIdForError = 'N/A';
  let currentExtensionSettings = { debugMode: false };

  try {
    console.log('üîÑ D√©but de g√©n√©ration de r√©ponse IA...');
    const storage = await chrome.storage.local.get(['apiKey', 'personas', 'activePersonaId', 'extensionSettings']);
    activePersonaIdForError = storage.activePersonaId;
    currentExtensionSettings = storage.extensionSettings || currentExtensionSettings;

    const { apiKey, personas, activePersonaId } = storage;

    if (!apiKey || apiKey.trim() === '') throw new Error("‚ùå Cl√© API Google Gemini manquante. Configurez-la dans les options de l'extension (clic sur l'ic√¥ne ü§ñ).");
    if (!personas || Object.keys(personas).length === 0) throw new Error("‚ùå Aucun persona trouv√©. Cr√©ez un persona dans les options de l'extension.");
    if (!activePersonaId || !personas[activePersonaId]) throw new Error("‚ùå Persona actif introuvable. S√©lectionnez un persona dans les options.");

    const activePersona = personas[activePersonaId];
    console.log(`üé≠ Utilisation du persona : "${activePersona.name}"`);
    const { messages } = conversationData;
    if (!messages || messages.length === 0) throw new Error("‚ùå Aucun message √† analyser. Participez √† la conversation d'abord.");

    const improvedPrompt = buildPersonaPrompt(messages, activePersona, currentExtensionSettings);
    console.log('üìù Prompt construit avec persona:', improvedPrompt.substring(0, 200) + '...');
    const response = await callGeminiAPI(apiKey, improvedPrompt);
    const cleanedSuggestions = processGeminiResponse(response);
    await updateUsageStats(activePersonaId);
    console.log('‚ú® Suggestions finales:', cleanedSuggestions);
    return cleanedSuggestions;

  } catch (error) {
    console.error('üí• Erreur lors de la g√©n√©ration:', error.message, error);
    if (!currentExtensionSettings.hasOwnProperty('debugMode')) {
        try {
            const settingsFallback = await chrome.storage.local.get('extensionSettings');
            currentExtensionSettings = settingsFallback.extensionSettings || { debugMode: false };
        } catch (e) { console.warn("Impossible de r√©cup√©rer extensionSettings dans le bloc catch principal:", e); }
    }
     if (activePersonaIdForError === 'N/A') {
        try {
            const personaIdFallback = await chrome.storage.local.get('activePersonaId');
            activePersonaIdForError = personaIdFallback.activePersonaId || 'N/A';
        } catch (e) { console.warn("Impossible de r√©cup√©rer activePersonaId dans le bloc catch principal:", e); }
    }
    const errorForLogging = {
      timestamp: new Date().toISOString(),
      message: error.message,
      errorType: error.name || 'GenerationError',
      persona: activePersonaIdForError,
    };
    if (currentExtensionSettings.debugMode && error.stack) errorForLogging.stack = error.stack;
    chrome.storage.local.get(['errorLog'], (result) => {
      const errorLog = (result.errorLog || []).slice(-9);
      errorLog.push(errorForLogging);
      chrome.storage.local.set({ errorLog });
    });
    const errorForResponse = { message: error.message, errorType: error.name || 'GenerationError' };
    if (currentExtensionSettings.debugMode && error.stack) errorForResponse.stack = error.stack;
    throw errorForResponse;
  }
}

function buildPersonaPrompt(messages, persona, settings) {
  const maxMessages = settings?.maxMessages || 15;
  const responseLength = settings?.responseLength || 'medium';
  const recentMessages = messages.slice(-maxMessages);
  const conversationHistory = recentMessages.map(msg => `${msg.author}: ${msg.content}`).join('\n');
  const lengthInstructions = {
    'short': 'R√©ponses tr√®s courtes (5-15 mots maximum)',
    'medium': 'R√©ponses mod√©r√©es (15-40 mots)',
    'long': 'R√©ponses d√©taill√©es (40-80 mots)'
  };
  return `Tu es un assistant IA qui g√©n√®re des suggestions de r√©ponses pour des conversations Discord. ...`; // Truncated for brevity
}

async function callGeminiAPI(apiKey, prompt) {
  console.log('Attempting to call Gemini API');
  const GEMINI_API_URL = `https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash-preview-05-20:generateContent?key=${apiKey}`;
  const requestBody = { /* ... */ }; // Truncated for brevity
  console.log('üöÄ Envoi de la requ√™te √† Gemini...');
  const response = await fetch(GEMINI_API_URL, { /* ... */ }); // Truncated for brevity
  if (!response.ok) {
    const rawErrorBody = await response.text();
    console.error('üî• Erreur API Gemini (corps brut):', rawErrorBody);
    let errorData = {}; try { errorData = JSON.parse(rawErrorBody); } catch (e) { console.warn('‚ö†Ô∏è Impossible de parser le corps de l\'erreur JSON:', e, rawErrorBody); }
    console.error('üî• Erreur API Gemini (donn√©es pars√©es potentielles):', errorData);
    const messageDetail = (errorData && errorData.error && errorData.error.message) ? errorData.error.message : rawErrorBody;
    if (response.status === 400) throw new Error(`Erreur 400 (Mauvaise requ√™te): Cl√© API invalide ou requ√™te malform√©e. Gemini dit: "${messageDetail}"`);
    else if (response.status === 403) throw new Error(`Erreur 403 (Interdit): Acc√®s refus√©. V√©rifiez les permissions de votre cl√© API. Gemini dit: "${messageDetail}"`);
    else if (response.status === 429) throw new Error(`Erreur 429 (Trop de requ√™tes): Limite de taux d√©pass√©e. Attendez avant de r√©essayer. Gemini dit: "${messageDetail}"`);
    else throw new Error(`Erreur API (${response.status}): ${messageDetail}`);
  }
  const data = await response.json();
  console.log('üì• R√©ponse brute Gemini re√ßue');
  return data;
}

function processGeminiResponse(data) {
  try {
    console.log('‚öôÔ∏è Entr√©e de processGeminiResponse (donn√©es brutes API):', JSON.stringify(data, null, 2));
    if (data.promptFeedback && data.promptFeedback.blockReason) { /* ... */ } // Truncated
    const candidate = data.candidates && data.candidates.length > 0 ? data.candidates[0] : null;
    if (!candidate) { /* ... */ throw new Error('Aucune suggestion (candidate) g√©n√©r√©e par l\'IA...'); } // Truncated
    if (candidate.finishReason) { /* ... */ } else if (candidate.safetyRatings) { /* ... */ } // Truncated
    if (!candidate.content || !candidate.content.parts || candidate.content.parts.length === 0) { /* ... */ throw new Error('R√©ponse IA (candidate.content.parts) malform√©e ou vide...'); } // Truncated
    const textResponse = candidate.content.parts[0].text;
    console.log('üìÑ Texte brut de la r√©ponse IA (textResponse):', textResponse);
    if (!textResponse || textResponse.trim() === '') { /* ... */ throw new Error('R√©ponse IA (textResponse) vide...');} // Truncated
    let suggestions = textResponse.split('\n').map(line => line.trim().replace(/^[-*‚Ä¢]\s*|^\d+[\.)]\s*|^[‚ñ∫‚ñ∏]\s*/, '')).filter(line => line.length >= 3 && !/suggestion|r√©ponse|voici|voil√†/i.test(line)).slice(0, 4);
    if (suggestions.length > 0 && suggestions.length < 4) { /* ... */ } // Truncated for brevity (variation logic)
    if (suggestions.length === 0) { /* ... */ throw new Error('No valid suggestions could be extracted from the AI response.');} // Truncated
    console.log('‚ú® Suggestions finales apr√®s traitement:', suggestions);
    return suggestions;
  } catch (error) { console.error('üí• Erreur dans processGeminiResponse. Donn√©es d\'entr√©e (data):', JSON.stringify(data, null, 2), 'Erreur:', error); throw error; }
}

function createVariation(original) { /* ... */ return ""; } // Truncated

async function savePersona(personaData) {
  console.log('Attempting to save persona:', personaData);
  return new Promise((resolve, reject) => {
    chrome.storage.local.get(['personas'], (result) => {
      const personas = result.personas || {};
      const personaId = personaData.id || 'persona_' + Date.now();
      const persona = {
        id: personaId, name: personaData.name || 'Nouveau Persona',
        prompt: personaData.prompt || 'Tu es un assistant amical.',
        createdAt: personaData.createdAt || new Date().toISOString(),
        lastUsed: new Date().toISOString()
      };
      personas[personaId] = persona;
      chrome.storage.local.set({ personas }, () => {
        if (chrome.runtime.lastError) {
          console.error('‚ùå Erreur lors de la sauvegarde du persona (savePersona):', chrome.runtime.lastError.message, personaData);
          reject(new Error('Impossible de sauvegarder le persona: ' + chrome.runtime.lastError.message));
        } else {
          console.log('‚úÖ Persona successfully saved/updated. All personas:', personas);
          resolve(persona);
        }
      });
    });
  });
}

async function deletePersona(personaId) {
  console.log('Attempting to delete persona:', personaId); // Added log
  return new Promise((resolve, reject) => {
    chrome.storage.local.get(['personas', 'activePersonaId'], (result) => {
      let { personas, activePersonaId } = result;
      personas = personas || {};
      if (!personas[personaId]) return reject(new Error('Persona introuvable'));
      if (Object.keys(personas).length <= 1) return reject(new Error('Impossible de supprimer le dernier persona'));
      const personaName = personas[personaId].name;
      delete personas[personaId];
      const updates = { personas };
      if (activePersonaId === personaId) updates.activePersonaId = Object.keys(personas)[0];
      chrome.storage.local.set(updates, () => {
        if (chrome.runtime.lastError) {
          console.error('‚ùå Erreur lors de la suppression du persona:', chrome.runtime.lastError.message, personaId);
          reject(new Error('Impossible de supprimer le persona: ' + chrome.runtime.lastError.message));
        } else {
          console.log('üóëÔ∏è Persona successfully deleted. Name:', personaName, "New active ID (if changed):", updates.activePersonaId);
          resolve({ deletedName: personaName, newActive: updates.activePersonaId });
        }
      });
    });
  });
}

async function setActivePersona(personaId) {
  console.log('Attempting to set active persona:', personaId);
  return new Promise((resolve, reject) => {
    chrome.storage.local.get(['personas'], (result) => {
      const personas = result.personas || {};
      if (!personas[personaId]) return reject(new Error('Persona introuvable'));
      personas[personaId].lastUsed = new Date().toISOString();
      chrome.storage.local.set({ activePersonaId: personaId, personas: personas }, () => {
        if (chrome.runtime.lastError) {
          console.error('‚ùå Erreur lors de l\'activation du persona:', chrome.runtime.lastError.message, personaId);
          reject(new Error('Impossible d\'activer le persona: ' + chrome.runtime.lastError.message));
        } else {
          console.log('üé≠ Active persona set. ID:', personaId, 'All personas:', personas);
          resolve(personas[personaId]);
        }
      });
    });
  });
}

async function updateUsageStats(personaId) { /* ... */ } // Truncated, no logging changes requested here
